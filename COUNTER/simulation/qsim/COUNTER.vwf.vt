// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2024 16:23:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          COUNTER
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module COUNTER_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enable;
reg mode;
reg reset;
// wires                                               
wire [7:0] Q;

// assign statements (if any)                          
COUNTER i1 (
// port map - connection between master ports and signals/registers   
	.Q(Q),
	.clock(clock),
	.enable(enable),
	.mode(mode),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// mode
initial
begin
	mode = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #240000 1'b0;
	reset = #160000 1'b1;
	reset = #80000 1'b0;
	reset = #160000 1'b1;
	reset = #160000 1'b0;
	reset = #160000 1'b1;
end 
endmodule

